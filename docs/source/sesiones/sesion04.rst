Misi√≥n 04: Sonda espacial üõ∞Ô∏è
===================================

En la misi√≥n anterior aprendimos a usar instrucciones, crear variables, a crear en expresiones matem√°ticas y a usar sprites. 

.. figure:: ../img/sesion04/sonda_espacial.jpg
    :scale: 50%
    :figclass: align-center
    :alt: ordenes

En esta misi√≥n, aprenderemos a crear nuestras propias :term:`funciones` para dar un instrucciones espec√≠ficas a la computadora.

Ya hemos usado funciones, por ejemplo, la funci√≥n :py:func:`arcade.draw_line()`, la funci√≥n :py:func:`arcade.Text()` o la funci√≥n :py:func:`arcade.Sprite()`. Ahora vamos a aprender a crear nuestras propias funciones.

Para comenzar, abra **Visual Studio Code** y utiliza la carpeta ``galaxia_indie``. Verifica el archivo ``mision01.py`` tenga el siguiente c√≥digo:

.. code-block:: python

  """
  Galaxia Indie

  Un juego indie minimalista de exploraci√≥n espacial
  donde viajar√°s a trav√©s del cosmos.
  Navega a trav√©s de misteriosos sistemas estelares,
  descubriendo antiguos artefactos y desentra√±ando los
  misterios de una civilizaci√≥n olvidada.

  Creado con Python y con Arcade.
  """

  # Importar la librer√≠a "arcade" para crear videojuegos.
  import arcade

  # Constantes
  ALTO = 600
  ANCHO = 600
  TITULO = "Misi√≥n 01: Listos para el despegue"

  # Variables
  # Creamos una lista de sprites
  planetas = arcade.SpriteList()
  naves = arcade.SpriteList()

  # Creamos un sprite y establecemos la posici√≥n
  planeta1 = arcade.Sprite("sprites/planeta01.png", 0.08)
  planeta1.center_x = 150
  planeta1.center_y = 450

  # Agregamos el sprite a la lista de sprites
  planetas.append(planeta1)

  # Sprite 2
  planeta2 = arcade.Sprite("sprites/planeta02.png", 0.02)
  planeta2.center_x = ANCHO - 100
  planeta2.center_y = ALTO / 2
  planetas.append(planeta2)

  # Sprite 3
  planeta3 = arcade.Sprite("sprites/planeta03.png", 0.05)
  planeta3.center_x = 100
  planeta3.center_y = ALTO / 3
  planetas.append(planeta3)

  # Sprite 4
  nave01 = arcade.Sprite("sprites/nave01.png", 0.6)
  nave01.center_x = ANCHO / 2
  nave01.center_y = 40
  naves.append(nave01)

  # Crear una ventana de 600x600 p√≠xeles con el t√≠tulo "Misi√≥n 01: Listos para el despegue"
  arcade.open_window(ANCHO, ALTO, TITULO)

  # Establecer el color de fondo de la ventana
  arcade.set_background_color( arcade.color.DARK_IMPERIAL_BLUE )

  # Inicio del dibujo
  arcade.start_render()

  # (Aqu√≠ ir√° el c√≥digo para dibujar)
  planetas.draw()
  naves.draw()

  # Fin del dibujo
  arcade.finish_render()

  # Inicia el bucle principal del juego que mantiene la ventana abierta
  arcade.run()

Al ejecutar el c√≥digo, deber√≠as ver los tres planetas y la nave en la ventana como 
se muestra a continuaci√≥n.

.. figure:: ../img/sesion04/tresplanetasynave.png
    :width: 300
    :figclass: align-center
    :alt: tresplanetasynave

Funci√≥n: Crear ventana
------------------

.. rubric:: 1. Selecciona y recorta las instrucciones
  :heading-level: 2

**Selecciona y recorta** la siguiente instrucci√≥n y comentario:

.. code-block:: python
   :caption: Selecciona y recorta la siguiente instrucci√≥n y comentario
   :emphasize-lines: 4-5

    # Sprite 4
    ...

    # Crear una ventana de 600x600 p√≠xeles con el t√≠tulo "Misi√≥n 01: Listos para el despegue"
    arcade.open_window(ANCHO, ALTO, TITULO)

    # Inicio del dibujo
    ...

.. rubric:: 2. Escribe la funci√≥n y coloca el c√≥digo
  :heading-level: 2

#. Ve al inicio del programa, despu√©s de crear todas las variables y define la funci√≥n :py:func:`abrir_ventana()`. 
#. Pega las instrucciones y los comentarios que copiaste anteriormente.
#. Selecciona SOLO las instrucciones y los comentarios que pegaste recientemente, y presiona una (1) vez la tecla TAB.

.. code-block:: python
   :caption: Funci√≥n abrir_ventana
   :emphasize-lines: 4-9

    # Sprite 4
    ....

    #Funciones
    def abrir_ventana():
      """ Abre la ventana """

      # Crear una ventana de 600x600 p√≠xeles con el t√≠tulo "Misi√≥n 01: Listos para el despegue"
      arcade.open_window(ANCHO, ALTO, TITULO)

    # Establecer el color de fondo de la ventana
    
    ...

.. rubric:: 3. Llama a la funci√≥n
  :heading-level: 2

Regresa al lugar donde se encontraban la instrucci√≥n y **llama** a la funci√≥n con su nombre y un par de par√©ntesis ``()``.

.. code-block:: python
   :caption: Llamada a la funci√≥n abrir_ventana
   :emphasize-lines: 7
  
   ...

   #Funciones
   def abrir_ventana():
      ...
   
   abrir_ventana()

   # Establecer el color de fondo de la ventana
   ...

Al ejecutar el c√≥digo, deber√≠as ver los tres planetas y la nave en la ventana como 
se muestra a continuaci√≥n.

.. figure:: ../img/sesion04/tresplanetasynave.png
    :width: 300
    :figclass: align-center
    :alt: tresplanetasynave

Reglas para escribir una funci√≥n
------------------

Para escribir una funci√≥n en Python, sigue estas reglas:

  #. Comienza con la palabra clave ``def``, que es la abreviatura de *define*.
  #. A continuaci√≥n, escribe el nombre de la funci√≥n. 
  #. Despu√©s del nombre de la funci√≥n, tenemos un par de par√©ntesis. Dentro de los par√©ntesis ir√°n los :term:`par√°metros` (Los veremos despu√©s).
  #. A continuaci√≥n, dos puntos.
  #. Por lo general, comenzamos una funci√≥n con un comentario de varias l√≠neas que explica lo que hace la funci√≥n.
  #. Todo el c√≥digo dentro funci√≥n tiene :term:`sangr√≠a` o :term:`indentaci√≥n`. 

.. warning::

  El nombre de una funci√≥n sigue las mismas reglas que los nombres de variables. Deben:

    1. Comenzar con una letra min√∫scula.
    2. Despu√©s de la primera letra, solo usa letras, n√∫meros y guiones bajos.
    3. No se permiten espacios. Usa guiones bajos en su lugar.
    4. Si bien se pueden usar letras may√∫sculas, los nombres de las funciones normalmente son todos en min√∫sculas.

Funci√≥n: Fondo de ventana
------------------

.. rubric:: Reto
  :heading-level: 2
  :class: mi-clase-css

#. Crea la funci√≥n :py:func:`fondo_ventana()`.
#. Copia y pega la instrucci√≥n y el comentario que establece el color de fondo de la ventana.
#. Llama a la funci√≥n :py:func:`fondo_ventana()` donde se encontraba la instrucci√≥n y el comentario. 

Al ejecutar el c√≥digo, deber√≠as ver los tres planetas y la nave en la ventana como 
se muestra a continuaci√≥n.

.. figure:: ../img/sesion04/tresplanetasynave.png
    :width: 300
    :figclass: align-center
    :alt: tresplanetasynave

.. admonition:: Haga click aqu√≠ para ver la soluci√≥n
  :collapsible: closed

  .. code-block:: python
    :emphasize-lines: 5-9, 12

    #Funciones
    def abrir_ventana():
      ...

    def fondo_ventana():
      """ Muestra el fondo de la ventana """
      
      # Establecer el color de fondo de la ventana
      arcade.set_background_color( arcade.color.DARK_IMPERIAL_BLUE )

    abrir_ventana()
    fondo_ventana()

    # Inicio del dibujo
    ...
    
.. rubric:: En resumen
  :heading-level: 2

Al finalizar esta sesi√≥n, tu c√≥digo deber√≠a verse as√≠:

.. code-block:: python

  """
  Galaxia Indie

  Un juego indie minimalista de exploraci√≥n espacial
  donde viajar√°s a trav√©s del cosmos.
  Navega a trav√©s de misteriosos sistemas estelares,
  descubriendo antiguos artefactos y desentra√±ando los
  misterios de una civilizaci√≥n olvidada.

  Creado con Python y con Arcade.
  """

  # Importar la librer√≠a "arcade" para crear videojuegos.
  import arcade

  # Constantes
  ALTO = 600
  ANCHO = 600
  TITULO = "Misi√≥n 01: Listos para el despegue"

  # Variables
  # Creamos una lista de sprites
  planetas = arcade.SpriteList()
  naves = arcade.SpriteList()

  # Creamos un sprite y establecemos la posici√≥n
  planeta1 = arcade.Sprite("sprites/planeta01.png", 0.08)
  planeta1.center_x = 150
  planeta1.center_y = 450

  # Agregamos el sprite a la lista de sprites
  planetas.append(planeta1)

  # Sprite 2
  planeta2 = arcade.Sprite("sprites/planeta02.png", 0.02)
  planeta2.center_x = ANCHO - 100
  planeta2.center_y = ALTO / 2
  planetas.append(planeta2)

  # Sprite 3
  planeta3 = arcade.Sprite("sprites/planeta03.png", 0.05)
  planeta3.center_x = 100
  planeta3.center_y = ALTO / 3
  planetas.append(planeta3)

  # Sprite 4
  nave01 = arcade.Sprite("sprites/nave01.png", 0.6)
  nave01.center_x = ANCHO / 2
  nave01.center_y = 40
  naves.append(nave01)

  #Funciones
  def abrir_ventana():
      """ Abre la ventana """
      
      # Crear una ventana de 600x600 p√≠xeles con el t√≠tulo "Misi√≥n 01: Listos para el despegue"
      arcade.open_window(ANCHO, ALTO, TITULO)

  def fondo_ventana():  
      """ Muestra el fondo de la ventana """
      
      # Establecer el color de fondo de la ventana
      arcade.set_background_color( arcade.color.DARK_IMPERIAL_BLUE )

  abrir_ventana()
  fondo_ventana()

  # Inicio del dibujo
  arcade.start_render()

  # (Aqu√≠ ir√° el c√≥digo para dibujar)
  planetas.draw()
  naves.draw()

  # Fin del dibujo
  arcade.finish_render()

  # Inicia el bucle principal del juego que mantiene la ventana abierta
  arcade.run()