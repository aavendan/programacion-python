Estrellas‚ú® y Planetasüåë
===================================

Sistema de coordenadas
------------------

Hemos aprendido a especificar el color de lo que queremos dibujar, lo 
siguiente que necesitamos aprender es c√≥mo ubicarlos. En tus clases 
de matem√°ticas, probablemente has aprendido sobre el sistema de 
coordenadas cartesiano, que se ve as√≠:

.. image:: ../img/cartesian_coordinate_system.svg
  :width: 400
  :alt: Sistema de coordenadas

Fuente: `Wikipedia: Cartesian coordinate system <https://commons.wikimedia.org/wiki/File:Cartesian_coordinate_system_(comma).svg>`_

Nuestros gr√°ficos se dibujar√°n usando este mismo sistema. Pero 
debemos tener en cuenta:

1. Solo dibujaremos en el cuadrante superior derecho (Cuadrante I). 
Por lo tanto, el punto 0,0 estar√° en la esquina inferior izquierda 
de la pantalla, y todas las coordenadas negativas estar√°n fuera de 
la pantalla.

2. Cada punto es un :term:`p√≠xel`. As√≠ que tu ventana tiene 600 
p√≠xeles de ancho. 

.. warning::

  Recuerda que los p√≠xeles se cuentan desde el cero (0). El cero es uno 
  de los p√≠xeles, por lo que van desde el 0 hasta el 599 (600) p√≠xeles.

De l√≠neas a estrellas
------------------

Para dibujar una l√≠nea, se utiliza con la funci√≥n :py:func:`arcade.draw_line()` 
con los siguientes par√°metros:

1. La coordenada del punto inicial (posici√≥n en X, posici√≥n en Y), 
2. La coordenada del punto final (posici√≥n en X, posici√≥n en Y),
3. El color de la l√≠nea, y
4. El ancho de la l√≠nea. 

En nuestra imagen de ejemplo, usaremos varias l√≠neas para dibujar 
rayos de una estrella:

.. code-block:: python
    :emphasize-lines: 8-12, 14-17

    ...

    # Inicio del dibujo
    ...

    # (Aqu√≠ ir√° el c√≥digo para dibujar)

    # Rayos de luz
    # Horizontal, de izquierda (400, 450) a derecha (500, 450)
    arcade.draw_line(400, 450, 500, 450, arcade.color.HELIOTROPE, 1)
    # Vertical, de arriba (450, 500) a abajo (450, 400)
    arcade.draw_line(450, 500, 450, 400, arcade.color.HELIOTROPE, 1)

    # Abajo a la izquierda (425, 425) hacia arriba la derecha (475, 475)
    arcade.draw_line(425, 425, 475, 475, arcade.color.HELIOTROPE, 3)
    # Arriba a la izquierda (425, 475) hacia abajo la derecha (475, 425)
    arcade.draw_line(425, 475, 475, 425, arcade.color.HELIOTROPE, 3)

    # Fin del dibujo
    ...

.. image:: ../img/sesion02/estrella.png
  :width: 300
  :alt: Estrella

.. rubric:: Reto
  :heading-level: 2
  :class: mi-clase-css

Crea tu propia estrella dentro de la ventana, tomando como centro el 
punto (100,100). Decide y escoge el tama√±o, el grosor y el color de 
las l√≠neas de la estrella.

.. admonition:: Clic aqu√≠ para ver una pista
  :collapsible: closed

  A continuaci√≥n un ejemplo de c√≥digo para dibujar una estrella en 
  el punto (100,100)

  .. code-block:: python

    # Estrella en  (100,100)
    # L√≠nea horizontal
    arcade.draw_line(75, 100, 125, 100, arcade.color.HELIOTROPE, 1)
    # L√≠nea vertical
    arcade.draw_line(100, 75, 100, 125, arcade.color.HELIOTROPE, 1)

    # L√≠neas diagonales
    arcade.draw_line(85, 85, 115, 115, arcade.color.HELIOTROPE, 3)
    arcade.draw_line(85, 115, 115, 85, arcade.color.HELIOTROPE, 3)

De c√≠rculos a planetas
------------------

Para dibujar un c√≠rculo, se utiliza con la funci√≥n 
:py:func:`arcade.draw_circle_filled()` con los siguientes par√°metros:

1. La coordenada del centro (posici√≥n en X, posici√≥n en Y), 
2. El radio del c√≠rculo,
3. El color de la l√≠nea. 

En nuestra imagen de ejemplo, usaremos un c√≠rculo para dibujar un planeta:

.. code-block:: python
    :emphasize-lines: 6,7

    ...

    # Inicio del dibujo
    ...

    # Planeta	
    arcade.draw_circle_filled(100, 350, 30, arcade.csscolor.DARK_VIOLET)

    # Fin del dibujo
    ...

.. note::

    Puedes consultar los nombres en la 
    tabla de colores de 
    `arcade.csscolor <https://api.arcade.academy/en/latest/api_docs/arcade.csscolor.html>`_.
    para especificar colores por nombre (por 
    ejemplo `arcade.csscolor.DARK_VIOLET`), 

De c√≠rculos a cr√°teres
------------------

En nuestra imagen de ejemplo, usaremos varios c√≠rculos para dibujar los 
cr√°teres en el planeta al sobreponer c√≠rculos de diferentes formas y colores:

.. code-block:: python
    :emphasize-lines: 9-12

    ...

    # Inicio del dibujo
    ...

    # Planeta	
    arcade.draw_circle_filled(100, 350, 30, arcade.csscolor.DARK_VIOLET)

    # Cr√°teres del planeta
    arcade.draw_circle_filled(90, 360, 5, arcade.csscolor.DARK_SLATE_GRAY)
    arcade.draw_circle_filled(110, 355, 4, arcade.csscolor.DARK_SLATE_GRAY)
    arcade.draw_circle_filled(95, 340, 3, arcade.csscolor.DARK_SLATE_GRAY)

    # Fin del dibujo
    ...

.. image:: ../img/sesion02/crateres.png
  :width: 300
  :alt: crateres

.. rubric:: Reto
  :heading-level: 2
  :class: mi-clase-css

Crea tu propio planeta dentro de la ventana, tomando como centro el
punto (200,200). Decide la cantidad y el color de los cr√°cteres en el planeta.

.. admonition:: Clic aqu√≠ para ver una pista
  :collapsible: closed

  A continuaci√≥n un ejemplo de c√≥digo para dibujar un planeta en el 
  punto (200,200)

  .. code-block:: python

    # Planeta en (200,200)
    # Planeta Gris
    arcade.draw_circle_filled(200, 200, 15, arcade.csscolor.GRAY)
    
    # Cr√°teres del planeta
    arcade.draw_circle_filled(190, 205, 3, arcade.csscolor.DARK_GRAY)
    arcade.draw_circle_filled(210, 195, 3, arcade.csscolor.DARK_GRAY)
    arcade.draw_circle_filled(205, 210, 2, arcade.csscolor.DARK_GRAY)

Texto
------------------

Para dibujar texto, se utiliza con la funci√≥n :py:func:`arcade.draw_text()` 
con los siguientes par√°metros:

1. El texto a dibujar,
2. La coordenada del punto inicial (posici√≥n en X, posici√≥n en Y),
3. El color del texto,
4. El tama√±o del texto.

.. code-block:: python
    :emphasize-lines: 9-10

    ...

    # Inicio del dibujo
    ...

    # Cr√°teres del planeta
    ...

    # T√≠tulo en (300, 200), de tama√±o 32 pts.
    arcade.draw_text("Galaxia Indie", 300, 200, arcade.color.WHEAT, 32)

    # Fin del dibujo
    ...

.. image:: ../img/sesion02/texto.png
  :width: 300
  :alt: texto

Hasta ahora, hemos aprendido c√≥mo importar **Arcade** y c√≥mo llamar a ciertas 
funciones para dibujar figuras geom√©tricas. El siguiente paso es hacer nuestro 
c√≥digo m√°s flexible.

Constantes
------------------

Una :term:`constante` es un valor que no cambia durante la ejecuci√≥n del 
programa, por ejemplo el ancho de la ventana.

.. code-block:: python
    :emphasize-lines: 3,6

    ...

    ANCHO = 600

    # Crear una ventana de 600x600 p√≠xeles con el t√≠tulo "Misi√≥n 01: Listos para el despegue"
    arcade.open_window( ANCHO, 600, "Misi√≥n 01: Listos para el despegue")    

    ...

El c√≥digo anterior, se asigna el valor de 600 la constante ``ANCHO``. 
Luego, en la funci√≥n :py:func:`arcade.open_window()` reemplace el valor de 600 
por el nombre de la constante ``ANCHO``.

.. warning::
    
    1. Los nombres deben ser descriptivos, 
    2. Todas las letras en **may√∫scula**, 
    3. Si tienes varias palabras, sep√°ralas con un gui√≥n bajo, y 
    4. Los nombres no pueden  comenzar con un n√∫mero ni tener un espacio ni ning√∫n s√≠mbolo que no sea un gui√≥n bajo. 

.. rubric:: Reto
  :heading-level: 2
  :class: mi-clase-css

Crea las constantes ``ALTO`` y ``TITULO``. Asigna a cada constan el valor 
correspondiente. Luego, en la funci√≥n :py:func:`arcade.open_window()` reemplace 
los valores por la constante correspondiente.

.. admonition:: Clic aqu√≠ para ver una pista
  :collapsible: closed

  A continuaci√≥n, la soluci√≥n al reto anterior.

  .. code-block:: python
    :emphasize-lines: 4,5,8

    ...

    ANCHO = 600
    ALTO = 600
    TITULO = "Misi√≥n 01: Listos para el despegue"
    
    # Crear una ventana de 600x600 p√≠xeles con el t√≠tulo "Misi√≥n 01: Listos para el despegue"
    arcade.open_window( ANCHO, ALTO, TITULO )    

    ...

Variables
------------------

Una :term:`variable` es un valor que la computadora almacena en la memoria y 
que puede cambiar (variar) en otra parte del programa. 

A continuaci√≥n, agrega las siguientes instrucciones al c√≥digo anterior:

  .. code-block:: python
    :emphasize-lines: 1

    ...

    # (Aqu√≠ ir√° el c√≥digo para dibujar)
    

    ...



Para identificar las variables y las constantes, hay nombres que debes usar, 
nombres que no debes usar y nombres que no puedes usar.

.. warning::
    
    1. Los nombres deben ser descriptivos, 
    2. Todas las letras en **min√∫scula**, 
    3. Si tienes varias palabras, sep√°ralas con un gui√≥n bajo, y 
    4. Los nombres no pueden  comenzar con un n√∫mero ni tener un espacio ni ning√∫n s√≠mbolo que no sea un gui√≥n bajo. 
